/**
\section RAWtoRECO RAW to RECO
\code
cmsDriver.py reco -s RAW2DIGI,RECO -n 100 --filein=files:///afs/cern.ch/user/l/lbrianza/work/public/C068EA4D-F13C-E211-B1F9-485B3977172C_SingleEle_RAW_15Apr_Run2012D.root --data --conditions=auto:run2_data
\endcode

\section ALCARAWProduction ALCARAW Production
\code
cmsDriver.py reco -s ALCA:EcalUncalElectron -n 100 --filein=files:///afs/cern.ch/user/s/shervin/scratch1/CMSSW_7_4_X_2015-01-09-0200/src/Calibration/EcalAlCaRecoProducers/reco_RAW2DIGI_RECO.root --data --conditions=auto:run2_data
\endcode

\section ALCARECOProduction ALCARECO Production

\code
cmsDriver.py reco -s ALCA:EcalCalElectron -n 100 --filein=files:///afs/cern.ch/user/s/shervin/scratch1/CMSSW_7_4_X_2015-01-09-0200/src/Calibration/EcalAlCaRecoProducers/reco_RAW2DIGI_RECO.root --data --conditions=auto:run2_data
\endcode



*/

########################## ALCARAW production
./script/prodAlcaraw.sh `./scripts/parseDatasetFile.sh alcaraw_datasets.dat | grep "name of the dataset"` 

./script/prodAlcaraw.sh `./scripts/parseDatasetFile.sh alcaraw_datasets.dat | grep "name of the dataset"`  --check
to check the job status

########################## ALCARECO production 
## data
./script/prodAlcareco.sh `./scripts/parseDatasetFile.sh alcareco_datasets.dat | grep "name of the dataset"` 
## MC
./script/prodAlcareco.sh `./scripts/parseDatasetFile.sh alcareco_datasets.dat | grep "name of the dataset"` --isMC

use -s ZSkim or -s WSkim if you want to filter the MC events, it's automatic for data

########################## Standard ntuple production from ALCARECO
# Data:
./scripts/prodNtuples.sh `./scripts/parseDatasetFile.sh alcareco_datasets.dat` --type=alcareco --json=jsonFile.txt --json_name=190645-208686_22Jan_v2 
jsonName: {runMin}-{runMax}_{Prompt,rerecoName}_{versionOfTheJSON}
# MC:
./scripts/prodNtuples.sh `./scripts/parseDatasetFile.sh alcareco_datasets.dat` --type=alcareco --isMC
or
./scripts/prodNtuples.sh `./scripts/parseDatasetFile.sh alcareco_datasets.dat` --type=alcarecosim

########################## Standard ntuple production from already produced ALCARERECO
# Data: parse the ***alcarereco_datasets.dat**** file!
./scripts/prodNtuples.sh `./scripts/parseDatasetFile.sh alcarereco_datasets.dat` --type=ALCARERECO --json=jsonFile.txt --json_name=190645-208686_22Jan_v2 
jsonName: {runMin}-{runMax}_{Prompt,rerecoName}_{versionOfTheJSON}

########################## Standard ALCARERECO production + ntuples!
# Data: parse the ***alcaraw_datasets.dat**** file!
# json applied only in ntuple creation!
 ./scripts/RerecoQuick.sh -p RUN2012A -t config/reRecoTags/Cal_Dic2012_AlphaComb_v2.py --json=/afs/cern.ch/cms/CAF/CMSCOMM/COMM_DQM/certification/Collisions12/8TeV/Reprocessing/Cert_190456-208686_8TeV_22Jan2013ReReco_Collisions12_JSON.txt --json_name=190456-208686_22Jan_v1 
jsonName: {runMin}-{runMax}_{Prompt,rerecoName}_{versionOfTheJSON}

->
 ./scripts/RerecoQuick.sh -p RUN2012A -t config/reRecoTags/Cal_Dic2012_AlphaComb_v2.py --json=/afs/cern.ch/cms/CAF/CMSCOMM/COMM_DQM/certification/Collisions12/8TeV/Reprocessing/Cert_190456-208686_8TeV_22Jan2013ReReco_Collisions12_JSON.txt --json_name=190456-208686_22Jan_v1 --check

to check the job status, auto-resubmit, merge the ntuple files in one
